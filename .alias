#!/usr/bin/env bash

# General stuff
alias ls="ls -lFG"
alias dir="ls"
alias du="du -h"
alias more=less
alias va="vi ~/.alias"
alias sa="source ~/.alias"
alias vbrc="vi ~/.bashrc"
alias sbrc="source ~/.bashrc"
alias su="sudo"
alias c="clear"
alias scmd="history|grep --color"
alias o66="pkill -9 node"

# For ports
function whoson () { lsof -i:$1; }
function byebye () { kill -9 $1; }

# Make new dir and cd into it
function mkd () { mkdir "$1" && cd "$1"; }

# Make cm, mv and rm require confirmation.
alias cp="cp -i"
alias mv="mv -i"
alias rm="rm -i"

# For brew
alias bi="brew install"

# For git
# Make `g` behave like `git status` with no args, or `git` with args
g () {
  if [ $# -eq 0 ]
  then
    git status
  else
    git "$@"
  fi
}
#__git_complete g _git

alias gcm="git commit -m"
alias gc="git commit"
alias gp="git push"
alias gpu="git pull"
alias gpgm="git push github master"
alias gphm="git push heroku master"
alias gs="git status"
alias gd="git diff"
function anydotonly () {
  local DIFF_RESULT=`gd | grep -E 'describe\.only|it\.only'`
  if [ -z "$DIFF_RESULT" ]
  then
    return 0
  else
    echo -e "${RED}Please get rid of all '.only':${RESET}"
    gd | grep -E 'describe.only|it.only'
    return 1
  fi
}
alias gaa="anydotonly && git add -A"
alias gac="gaa && gcm"
alias gap="git add --patch"
alias ga="git add"
alias gb="git branch"
alias gco="git checkout"
alias gcod="git checkout develop"
alias gcom="git checkout main"
alias gdc="git diff --cached"
alias gl="git log"
alias glg="git log --graph --stat"
alias gld="git log --graph --stat -p"
alias grH="git reset HEAD"
function grw () { git reset HEAD~"$1"; }
alias gcp="git cherry-pick"
function gf () { gco -b feature/"$1" && gp -u origin feature/"$1"; }
function gcor() {
  gco $(gb | grep release | tail -1);
}
# Deletes local and remote branches
function gdb () { gb -d "$1" && gp origin -d "$1"; }
function gDb () { gb -D "$1" && gp origin -d "$1"; }
function gup () { git fetch origin && git merge origin/"$1"; }
function gupr () { gup $(gb | grep release | tail -1); }
function grb () { git rebase origin/"$1"; }
# Opens a "Open PR" view against latest release branch
function pr () { gp && open "SOME_URL_GOES_HERE/$(basename `pwd`)/compare/$(gb | grep release | tail -1 | sed -e 's/^[[:space:]]*//')...$(git rev-parse --abbrev-ref HEAD)?expand=1"; }

# Lists branches with indexes and checkouts the branch on the selected index
gcon () {
  # git branch won't work for iteration purposes
  local BRANCHES=`git for-each-ref --format='%(refname)' refs/heads/`;
  local IDX=0;
  for BRANCH in $BRANCHES
  do
    let "IDX++";
    # Removes refs/heads/ from start of line
    echo ${BRANCH#refs/heads/} - $IDX;
  done
  echo;
  echo "Enter branch number";
  read LINE_NUM;
  while [ $LINE_NUM -gt $IDX ]
  do
    echo;
    echo "Invalid input. Please select a valid number."
    read LINE_NUM;
  done;
  local SELECTED_BRANCH=$(git for-each-ref --format='%(refname)' refs/heads/ | sed -n "$LINE_NUM"p);
  gco ${SELECTED_BRANCH#refs/heads/};
  echo;
}

# For GitHub
function remote () {
  open "https://SOME_URL_HERE/$(basename `pwd`)";
}


# For npm
function npmreset () { rm -rf node_modules/ && npm install; }

# For yarn
function dracarys () { echo 'Deleting node_modules...' && rm -rf node_modules/ && yarn install && yarn build:clean; }
alias yi="yarn install"
alias ydd="yarn dev:debug"
alias yir="yi && ydd"
alias yrr="yarnreset && ydd"
alias yll="ls -1 node_modules/ | grep '@$'"
function yua () {
  for link in $(ls -1F node_modules/ | grep '@$'); do
    echo "unlinking ${link%?}..."
    yarn unlink ${link%?}
    echo ""
  done
  yarn install --check-files
}
alias ybw="yarn build:watch"
alias ydd="yarn dev:debug"
alias ytw="yarn test:watch"
alias yuar="yua && ydd"

# Other stuff
function chkver () { while true; do echo "Looking for v $1" && echo && yarn info $(basename `pwd`) versions | tail -n 4 | head -n 2 && echo && sleep 3; done; }
alias dv="deactivate"

# For JWT
# decodejwt () { printf "\n" && echo -n "$1" | base64 -D && printf "\n\n"; }

# For Docker
function imgExplorer () { docker run -it $1 sh; }

# For AWS
alias vaws="vi ~/.aws/credentials"
